А также расскажем другие возможности, которые предлагает Python: как отделить текст с нужным стилем форматирования? Как извлечь все изображения из документа?

Для установки библиотеки в командной строке необходимо ввести:

> pip install python-docx
После успешной установки библиотеки, её нужно импортировать в Python. Обратите внимание, что несмотря на то, что для установки использовалось название python-docx, при импорте следует называть библиотеку docx:

import docx
Как правило, мы обращаемся к автоматизации, когда нам нужно извлечь нужную информацию не из одного, а сразу из многих документов. Чтобы иметь возможность обработать все документы, для начала нужно собрать список таких документов.
Здесь сможет помочь библиотека os, с помощью которой можно рекурсивно обойти директории, в которых хранятся документы. Предположим, что все они находятся внутри директории, где расположен скрипт:

import os

paths = []
folder = os.getcwd()
for root, dirs, files in os.walk(folder):
    for file in files:
        if file.endswith('docx') and not file.startswith('~'):
            paths.append(os.path.join(root, file))
Мы прошли по всем директориям и занесли в список paths все файлы с расширением. docx. Файлы, начинавшиеся с тильды, игнорировались (эти временные файлы возникают лишь тогда, когда в Windows открыт какой-либо из документов).
Теперь, когда у нас уже есть список всех документов, можно начинать с ними работать:

for path in paths:
    doc = docx.Document(path)
В блоке выше на каждом шаге цикла в переменную doc записывается экземпляр, представляющий собой весь документ. Мы можем посмотреть основные свойства такого документа:

properties = doc.core_properties
print('Автор документа:', properties.author)
print('Автор последней правки:', properties.last_modified_by)
print('Дата создания документа:', properties.created)
print('Дата последней правки:', properties.modified)
print('Дата последней печати:', properties.last_printed)
print('Количество сохранений:', properties.revision)
Из основных свойств можно получить автора документа, основные даты, количество сохранений документа и пр. Обратите внимание, что даты и время будут указаны в часовом поясе UTC+0.

Теперь поговорим о том, как можно проанализировать содержимое документа. Файлы с расширением docx обладают развитой внутренней структурой, которая в библиотеке docx представлена следующими объектами:

Объект Document, представляющий собой весь документ

Список объектов Paragraph – абзацы документа
* Список объектов Run – фрагменты текста с различными стилями форматирования (курсив, цвет шрифта и т.п.)
Список объектов Table – таблицы документа
* Список объектов Row – строки таблицы
* Список объектов Cell – ячейки в строке
* Список объектов Column – столбцы таблицы
* Список объектов Cell – ячейки в столбце
Список объектов InlineShape – иллюстрации документа
Работа с текстом документа

Для начала давайте разберёмся, как работать с текстом документа. В библиотеке docx это возможно через обращение к абзацам документа. Можно получить как сам текст абзаца, так и его характеристики: тип выравнивания,
величину отступов и интервалов, положение на странице.

Очень часто стоит задача получить весь текст из документа для дальнейшей обработки. Чтобы это сделать, достаточно лишь перебрать все абзацы документа:

text = []
for paragraph in doc.paragraphs:
    text.append(paragraph.text)
print('\n'.join(text))
Как мы видим, для получения текста абзаца нужно просто обратиться к объекту paragraph.text. Но что же делать, если нужно извлечь только абзацы с определёнными характеристиками и далее работать именно с ними?
Рассмотрим основные характеристики абзацев, которые можно проанализировать.

В первую очередь, можно получить стиль выравнивания абзацев в документе:

for paragraph in doc.paragraphs:
    print('Выравнивание абзаца:', paragraph.alignment)
Значения alignment будут соответствовать одному из основных стилей выравнивания: LEFT (0), center (1), RIGHT (2) или justify (3). Однако если пользователь не установил стиль выравнивания, значение параметра alignment будет None.

Кроме того, можно получить и значения отступов у абзацев документа:

for paragraph in doc.paragraphs:
    formatting = paragraph.paragraph_format
    print('Отступ перед абзацем:', formatting.space_before)
    print('Отступ после абзаца:', formatting.space_after)
    print('Отступ слева:', formatting.left_indent)
    print('Отступ справа:', formatting.right_indent)
    print('Отступ первой строки абзаца:', formatting.first_line_indent)
Как и в предыдущем примере, если отступы не были установлены, значения параметров будут None. В остальных случаях они будут представлены в виде целого числа в формате EMU (английские метрические единицы).
Этот формат позволяет конвертировать число как в метрическую, так и в английскую систему мер. Привести полученные числа в привычный формат довольно просто, достаточно просто добавить нужные единицы исчисления после параметра
(например, formatting.space_before.cm или formatting.space_before.pt). Главное помнить, что такое преобразование нельзя применять к значениям None.

Наконец, можно посмотреть на положение абзаца на странице. В меню Абзац… на вкладке Положение на странице находятся четыре параметра, значения которых также можно посмотреть при помощи библиотеки docx:

for paragraph in doc.paragraphs:
    formatting = paragraph.paragraph_format
    print('Не отрывать от следующего абзаца:', formatting.keep_with_next)
    print('Не разрывать абзац:', formatting.keep_together)
    print('Абзац с новой страницы:', formatting.page_break_before)
    print('Запрет висячих строк:', formatting.widow_control)
Параметры будут иметь значение None для случаев, когда пользователь не устанавливал на них галочки, и True, если устанавливал.

Мы рассмотрели основные способы, которыми можно проанализировать абзац в документе. Но бывают ситуации, когда мы точно знаем, что информация, которую нужно извлечь, написана курсивом или выделена определённым цветом.
Как быть в таком случае?

Можно получить список фрагментов с различными стилями форматирования (список объектов Run). Попробуем, к примеру, извлечь все фрагменты, написанные курсивом:

for paragraph in doc.paragraphs:
    for run in paragraph.runs:
        if run.italic:
            print(run.text)
Очень просто, не так ли? Посмотрим, какие ещё стили форматирования можно извлечь:

for paragraph in doc.paragraphs:
    for run in paragraph.runs:
        print('Полужирный текст:', run.bold)
        print('Подчёркнутый текст:', run.underline)
        print('Зачёркнутый текст:', run.strike)
        print('Название шрифта:', run.font.name)
        print('Цвет текста, RGB:', run.font.color.rgb)
        print('Цвет заливки текста:', run.font.highlight_color)
Если пользователь не менял стиль форматирования (отсутствует подчёркивание, используется стандартный шрифт и т.п.), параметры будут иметь значение None. Но если стиль определённого параметра изменялся, то:

параметры italic, bold, underline, strike будут иметь значение True;
параметр font.name – наименование шрифта;
параметр font.color.rgb – код цвета текста в RGB;
параметр font.highlight_color – наименование цвета заливки текста.
Делая цикл по фрагментам стоит иметь ввиду, что фрагменты с одинаковым форматированием могут быть разбиты на несколько, если в них встречаются символы разных типов (буквенные символы и цифры, кириллица и латиница).

Абзацы и их фрагменты могут быть оформлены в определённом стиле, соответствующем стилям Word (например, Normal, Heading 1, Intense Quote). Чем это может быть полезно? К примеру, обращение к стилям абзаца может пригодиться при выделении
нумерованных или маркированных списков. Каждый элемент таких списков считается отдельным абзацев, однако каждому из них приписан особый стиль – List Paragraph. С помощью кода ниже можно извлечь только элементы списков:

for paragraph in doc.paragraphs:
    if paragraph.style.name == 'List Paragraph':
        print(paragraph.text)
Чтобы закрепить полученные знания, давайте разберём менее тривиальный случай. Предположим, что у нас есть множество документов с похожей структурой, из которых нужно извлечь названия продуктов. Проанализировав документы, мы установили,
что продукты встречаются только в абзацах, начинающихся с новой страницы и выровненных по ширине. Притом сами названия написаны с использованием полужирного начертания, шрифт Arial Narrow. Посмотрим, как можно проанализировать документы:

for path in paths:
    doc = docx.Document(path)
    product_names = []
    for paragraph in doc.paragraphs:
        formatting = paragraph.paragraph_format
        if formatting.page_break_before and paragraph.alignment == 3:
            product_name, is_sequential = '', False
            for run in paragraph.runs:
                if run.bold and run.font.name == 'Arial Narrow':
                    is_sequential = True
                    product_name += run.text
                elif is_sequential == True:
                    product_names.append(product_name)
                    product_name, is_sequential = '', False
В блоке кода выше последовательно обрабатываются все файлы из списка paths, преобразовываемые в ходе обработки в объект Document. В каждом документе происходит перебор абзацев и выполняются проверки: абзац должен начинаться с новой
страницы и быть выровненным по ширине. Если проверки прошли успешно, внутри абзаца происходит уже перебор фрагментов с различными типами форматированием и проверки на начертание и шрифт.

Обратим внимание на переменную is_sequential, которая помогает определить, идут ли фрагменты, прошедшие проверку, друг за другом. Фрагменты с символами разных типов (буквы и числа, кириллица и латиница) разбиваются на несколько,
но поскольку в названии продукта одновременно могут встретиться символы всех типов, все последовательно идущие фрагменты соединяются в один. Он и заносится в результирующий список product_names.

Работа с таблицами

Мы рассмотрели способы, которыми можно обрабатывать текст в документах, а теперь давайте перейдём к обработке таблиц. Любую таблицу можно перебирать как по строкам, так и по столбцам. Посмотрим, как можно построчно получить текст
каждой ячейки в таблице:

for table in doc.tables:
    for row in table.rows:
        for cell in row.cells:
            print(cell.text)
Если же во второй строке заменить rows на columns, то можно будет аналогичным образом прочитать таблицу по столбцам. Текст в ячейках таблицы тоже состоит из абзацев. Если мы захотим проанализировать абзацы или фрагменты внутри ячейки,
то можно будет воспользоваться всеми методами объектов Paragraph и Run.

Часто может понадобиться проанализировать только таблицы, содержащие определённые заголовки. Попробуем, например, выделить из документа только таблицы, у которых в строке заголовка присутствуют названия Продукт и Стоимость.
Для таких таблиц построчно распечатаем все значения из ячеек:

for table in doc.tables:
    for index, row in enumerate(table.rows):
        if index == 0:
            row_text = list(cell.text for cell in row.cells)
            if 'Продукт' not in row_text or 'Стоимость' not in row_text:
                break
        for cell in row.cells:
            print(cell.text)
Также нам может понадобиться определить, какие из ячеек в таблице являются объединёнными. Стандартной функции для этого нет, однако мы можем воспользоваться тем, что нам доступно положение ячейки от каждого из краев таблицы:

for table in doc.tables:
    unique, merged = set(), set()
    for row in table.rows:
        for cell in row.cells:
            tc = cell._tc
            cell_loc = (tc.top, tc.bottom, tc.left, tc.right)
            if cell_loc in unique:
                merged.add(cell_loc)
            else:
                unique.add(cell_loc)
    print(merged)
Воспользовавшись этим кодом, можно получить все координаты объединённых ячеек для каждой из таблиц документа. Кроме того, разница координат tc.top и tc.bottom показывает, сколько строк в объединённой ячейке,
а разница tc.left и tc.right – сколько столбцов.

Наконец, рассмотрим возможность выделения из таблиц ячеек, в которых фон окрашен в определённый цвет. Для этого понадобится с помощью регулярных выражений посмотреть на xml-код ячейки:

import re

pattern = re.compile('w:fill=\"(\S*)\"')
for table in doc.tables:
    for row in table.rows:
        for cell in row.cells:
            match = pattern.search(cell._tc.xml)
            if match:
                if match.group(1) == 'FFFF00':
                    print(cell.text)
В этом блоке кода мы выделили только те ячейки, фон которых был окрашен в жёлтый цвет ( #FFFF00 в формате RGB).

Работа с иллюстрациями

В библиотеке docx также реализована возможность работы с иллюстрациями документа. Стандартными способами можно посмотреть только на размеры изображений:

for shape in doc.inline_shapes:
    print(shape.width, shape.height)
Однако при помощи сторонней библиотеки docx2txt и анализа xml-кода абзацев становится возможным не только выгрузить все иллюстрации документов, но и определить, в каком именно абзаце они встречались:

import os
import docx
import docx2txt

for path in paths:
    splitted = os.path.split(path)
    folders = [os.path.splitext(splitted[1])[0]]
    while splitted[0]:
        splitted = os.path.split(splitted[0])
        folders.insert(0, splitted[1])

    images_path = os.path.join('images', *folders)
    os.makedirs(images_path, exist_ok=True)

    doc = docx.Document(path)
    docx2txt.process(path, images_path)

    rels = {}
    for rel in doc.part.rels.values():
        if isinstance(rel._target, docx.parts.image.ImagePart):
            rels[rel.rId] = os.path.basename(rel._target.partname)
    
    for paragraph in doc.paragraphs:
        if 'Graphic' in paragraph._p.xml:
            for rId in rels:
                if rId in paragraph._p.xml:
                    print(os.path.join(images_path, rels[rId]))
                    print(paragraph.text)
В этом блоке мы выводим путь к изображению, которое сохранено на диске, и текст параграфа, в котором встретилось изображение. Все изображения находятся внутри директории images, а именно — в поддиректориях,
соответствующих расположению исходного файла Word.






from typing import List
from openpyxl import load_workbook

List1 = [ 'ttt' , 'b' , 'a' ]

# Load in the workbook
wb = load_workbook('123.xlsx')
wb.active = 1

sheet = wb.active

# Get sheet names

for i in range(1,len(List1)):
    sheet['A'+str(i)].value =str(List1[i])
    print(sheet['A'+str(i)].value)
    
wb.save('123.xlsx')



#Создаем листы/sheets в файле exel

from openpyxl import load_workbook
# Load in the workbook
wb = load_workbook('расчет.xlsx')
data = 'My'
# Get sheet names
wb.create_sheet(data)
print(wb.get_sheet_names())



    if keys[pg.K_q] :
        hero_angle += 5
        #hero_image_rect = hero_image.get_rect(center = (screen_width / 2 , screen_height / 2 ) , width = 60 , height = 60 )
        im_rotate = im.rotate(hero_angle , center = (25 , 25))
        im_rotate.save('картинки/hero.png')
        hero_image = pg.image.load('картинки/hero.png')


    if keys[pg.K_e] :
        hero_angle -= 5
        #hero_image_rect = hero_image.get_rect(center = (screen_width /2 , screen_height / 2 ),width = 60,height = 60)
        im_rotate = im.rotate(hero_angle, center=(25, 25))
        im_rotate.save('картинки/hero.png')
        hero_image = pg.image.load('картинки/hero.png')




shutil.copyfileobj(fsrc, fdst[, length]) - скопировать содержимое одного файлового объекта (fsrc) в другой (fdst). Необязательный параметр length - размер буфера при копировании
(чтобы весь, возможно огромный, файл не читался целиком в память).

При этом, если позиция указателя в fsrc не 0 (т.е. до этого было сделано что-то наподобие fsrc.read(47)), то будет копироваться содержимое начиная с текущей позиции, а не с начала файла.

shutil.copyfile(src, dst, follow_symlinks=True) - копирует содержимое (но не метаданные) файла src в файл dst. Возвращает dst (т.е. куда файл был скопирован). src и dst это строки - пути к файлам.
dst должен быть полным именем файла.

Если src и dst представляют собой один и тот же файл, исключение shutil.SameFileError.

Если dst существует, то он будет перезаписан.

Если follow_symlinks=False и src является ссылкой на файл, то будет создана новая символическая ссылка вместо копирования файла, на который эта символическая ссылка указывает.

shutil.copymode(src, dst, follow_symlinks=True) - копирует права доступа из src в dst. Содержимое файла, владелец, и группа не меняются.

shutil.copystat(src, dst, follow_symlinks=True) - копирует права доступа, время последнего доступа, последнего изменения, и флаги src в dst. Содержимое файла, владелец, и группа не меняются.

shutil.copy(src, dst, follow_symlinks=True) - копирует содержимое файла src в файл или папку dst. Если dst является директорией, файл будет скопирован с тем же названием, что было в src. 
Функция возвращает путь к местонахождению нового скопированного файла.

Если follow_symlinks=False, и src это ссылка, dst будет ссылкой.

Если follow_symlinks=True, и src это ссылка, dst будет копией файла, на который ссылается src

copy() копирует содержимое файла, и права доступа.

shutil.copy2(src, dst, follow_symlinks=True) - как copy(), но пытается копировать все метаданные.

shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False) - рекурсивно копирует всё дерево директорий с корнем в src, возвращает директорию назначения.

Директория dst не должна существовать. Она будет создана, вместе с пропущенными родительскими директориями.

Права и времена у директорий копируются copystat(), файлы копируются с помощью функции copy_function (по умолчанию shutil.copy2()).

Если symlinks=True, ссылки в дереве src будут ссылками в dst, и метаданные будут скопированы настолько, насколько это возможно.

Если False (по умолчанию), будут скопированы содержимое и метаданные файлов, на которые указывали ссылки.

Если symlinks=False, если файл, на который указывает ссылка, не существует, будет добавлено исключение в список ошибок, в исключении shutil.Error в конце копирования.

Можно установить флаг ignore_dangling_symlinks=True, чтобы скрыть данную ошибку.

Если ignore не None, то это должна быть функция, принимающая в качестве аргументов имя директории, в которой сейчас copytree(), и список содержимого, возвращаемый os.listdir(). Т.к. copytree() 
вызывается рекурсивно, ignore вызывается 1 раз для каждой поддиректории. Она должна возвращать список объектов относительно текущего имени директории (т.е. подмножество элементов во втором аргументе). 
Эти объекты не будут скопированы.

shutil.ignore_patterns(*patterns) - функция, которая создаёт функцию, которая может быть использована в качестве ignore для copytree(), игнорируя файлы и директории, которые соответствуют 
glob-style шаблонам.

Например:

copytree(source, destination, ignore=ignore_patterns('*.pyc', 'tmp*'))
# Скопирует все файлы, кроме заканчивающихся на .pyc или начинающихся с tmp
shutil.rmtree(path, ignore_errors=False, onerror=None) - Удаляет текущую директорию и все поддиректории; path должен указывать на директорию, а не на символическую ссылку.

Если ignore_errors=True, то ошибки, возникающие в результате неудавшегося удаления, будут проигнорированы. Если False (по умолчанию), эти ошибки будут передаваться обработчику onerror, или, если его нет, 
то исключение.

На ОС, которые поддерживают функции на основе файловых дескрипторов, по умолчанию используется версия rmtree(), не уязвимая к атакам на символические ссылки.

На других платформах это не так: при подобранном времени и обстоятельствах "хакер" может, манипулируя ссылками, удалить файлы, которые недоступны ему в других обстоятельствах.

Чтобы проверить, уязвима ли система к подобным атакам, можно использовать атрибут rmtree.avoids_symlink_attacks.

Если задан onerror, это должна быть функция с 3 параметрами: function, path, excinfo.

Первый параметр, function, это функция, которая создала исключение; она зависит от платформы и интерпретатора. Второй параметр, path, это путь, передаваемый функции. Третий параметр, excinfo - это 
информация об исключении, возвращаемая sys.exc_info(). Исключения, вызванные onerror, не обрабатываются.

shutil.move(src, dst, copy_function=copy2) - рекурсивно перемещает файл или директорию (src) в другое место (dst), и возвращает место назначения.

Если dst - существующая директория, то src перемещается внутрь директории. Если dst существует, но не директория, то оно может быть перезаписано.

shutil.disk_usage(path) - возвращает статистику использования дискового пространства как namedtuple с атрибутами total, used и free, в байтах.

shutil.chown(path, user=None, group=None) - меняет владельца и/или группу у файла или директории.

shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None) - возвращает путь к исполняемому файлу по заданной команде. Если нет соответствия ни с одним файлом, то None. mode это права доступа, требующиеся от файла,
 по умолчанию ищет только исполняемые.

Архивация
Высокоуровневые функции для созданиия и чтения архивированных и сжатых файлов. Основаны на функциях из модулей zipfile и tarfile.


shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]]) - создаёт архив и возвращает его имя.

base_name это имя файла для создания, включая путь, но не включая расширения (не нужно писать ".zip" и т.д.).

format - формат архива.

root_dir - директория (относительно текущей), которую мы архивируем.

base_dir - директория, в которую будет архивироваться (т.е. все файлы в архиве будут в данной папке).

Если dry_run=True, архив не будет создан, но операции, которые должны были быть выполнены, запишутся в logger.

owner и group используются при создании tar-архива.

shutil.get_archive_formats() - список доступных форматов для архивирования.


shutil.get_archive_formats()

[('bztar', "bzip2'ed tar-file"),
('gztar', "gzip'ed tar-file"),
('tar', 'uncompressed tar file'),
('xztar', "xz'ed tar-file"),
('zip', 'ZIP file')]


shutil.unpack_archive(filename[, extract_dir[, format]]) - распаковывает архив. filename - полный путь к архиву.

extract_dir - то, куда будет извлекаться содержимое (по умолчанию в текущую).

format - формат архива (по умолчанию пытается угадать по расширению файла).

shutil.get_unpack_formats() - список доступных форматов для разархивирования.

Запрос размера терминала вывода
shutil.get_terminal_size(fallback=(columns, lines)) - возвращает размер окна терминала.

fallback вернётся, если не удалось узнать размер терминала (терминал не поддерживает такие запросы, или программа работает без терминала). По умолчанию (80, 24).

shutil.get_terminal_size()

os.terminal_size(columns=102, lines=29)

shutil.get_terminal_size()  # Уменьшили окно

os.terminal_size(columns=67, lines=17)




from colorama import init
init()
from colorama import Fore, Back, Style
print(Fore.GREEN + 'зеленый текст')
print(Back.YELLOW + 'на желтом фоне')
print(Style.BRIGHT + 'стал ярче' + Style.RESET_ALL)
print('обычный текст')


img1 = Image.open('kartinka.jpg')
print(img1.size)
newsize = (600,800)
img.thumbnail(newsize)
img.save('testpicture.jpg')


from PIL import Image , ImageChops
im = Image.open('картинки/button.png')
im_crop = im.crop((0, 0, 100, 50))
im_crop.save('картинки/button.png')


from PIL import Image , ImageChops
Dir = 'картинки/'
one = Image.open(Dir + 'backpacks.jpg')
back = Image.open(Dir + 'testpicture.jpg')
r,g,b = one.split()
value = int(input('Введите число от 0 до 255. 255 - изображение станет прозрачным '))
#mask_temp = g.point(lambda x: уровень прозрачности )
mask_temp = g.point(lambda x : value )
mask = ImageChops.invert(mask_temp)
newpicture = Image.composite(one,back, mask)
newpicture.save('картинки/123.png')
newpicture.show()



#узнаем сколько времени выполняется код

import time 

start_time = time.time()

time.sleep(10)

print(f'Прошло {time.time() - statrtime}')


from tabulate import tabulate

table=[[],[]]

run = True

while True:

    print('- Меню - ')

    print('1 - Новая таблица')

    print('2 - Обновить таблицу')

    print('3 - Очистить заголовки таблицы')

    print('4 - Очистить столбцы таблицы')

    print('3 - Очистить таблицу')

    action = input('*Что делаем?')

    if action == '1':

        tablename=input('Название таблицы : ')

        rowscount = int(input('*Количество рядов : '))

        columnscount= int(input('*Количество столбцов : '))

        for i in range(columnscount):

            if len(table[0]) < columnscount: 

                headername = input('*Название столбца : ')

                table[0].append(headername)

        for i in range(rowscount):

            if len(table[1]) < rowscount: 

                rowname = input('Название 1 : ')

                table[1].append(rowname)

        print(tabulate(table, tablefmt="grid"))


    if action == '3':
        table[0].clear()
        table[1].clear()
        print(tabulate(table, tablefmt="grid"))



import math
Onex1 = 0
Oney1 = 0

Onex2 = 100
Oney2 = 100


Twox1 = 100
Twoy1 = 100

Twox2 = 200
Twoy2 = 200

#d2= (х2— х1)2+ (y2— y1)2.
len1=math.sqrt( (Onex2-Onex1)**2 +  (Oney2-Oney1)**2)
print('длина отрезка 1 : ',int(len1))

len2=math.sqrt( (Twox2-Twox1)**2 +  (Twoy2-Twoy1)**2)
print('длина отрезка 2 : ',int(len2))

len3=len1+len2

print('длина отрезка 3 : ',int(len3))


import os
a = int(input('num 1: '))
b = int(input('num 2: '))
c = input('znak : ')
if c == '+':
    print(int(a)+ int(b))
if c == '*':
    print(a*b)
if c == '/':
    print(a/b)
if c == '-':
    print(a-b)


#чистим консоль
if c == 'cls':
    os.system('cls||clear')


from tabulate import tabulate

print()

print()

table=[

       ["Столбец1 ","Столбец2"],

       ["Ячейка1","Ячейка2"],

       ["-","-"],

       ["-","-"],

       ["-"],

       ["-"],

       ["-","-"],

       ["-"]

       ]

print(tabulate(table, tablefmt="grid"))
print()
print()


#скачиваем файл по ссылке
import urllib.request
destination = 'tank.art'
url = 'https://drive.google.com/drive/folders/1TWQ5LVKPQkS9p2nFyQr_eQ6ZbeJRgx5F'
urllib.request.urlretrieve(url, destination)


# работаем с файлами exel используя python
import openpyxl
wb = openpyxl.reader.excel.load_workbook(filename="sample.xlsx", data_only=True)
print(wb.sheetnames)
wb.active = 1
sheet = wb.active
#print(sheet['A1'].value)
for i in range(1,12):
    print(sheet['A'+str(i)].value,sheet['B'+str(i)].value,sheet['C'+str(i)].value)

Команды для cmd / терминала

os.name - имя операционной системы. Доступные варианты: 'posix', 'nt', 'mac', 'os2', 'ce', 'java'.

os.environ - словарь переменных окружения. Изменяемый (можно добавлять и удалять переменные окружения).

os.getlogin() - имя пользователя, вошедшего в терминал (Unix).

os.getpid() - текущий id процесса.

os.uname() - информация об ОС. возвращает объект с атрибутами: sysname - имя операционной системы, nodename - имя машины в сети (определяется реализацией),
release - релиз, version - версия, machine - идентификатор машины.

os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True) - проверка доступа к объекту у текущего пользователя. Флаги: os.F_OK - объект существует, os.

R_OK - доступен на чтение, os.W_OK - доступен на запись,

os.X_OK - доступен на исполнение.

os.chdir(path) - смена текущей директории.

os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True) - смена прав доступа к объекту (mode - восьмеричное число).

os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True) - меняет id владельца и группы (Unix).

os.getcwd() - текущая рабочая директория.

os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True) - создаёт жёсткую ссылку.

os.listdir(path=".") - список файлов и директорий в папке.

os.mkdir(path, mode=0o777, *, dir_fd=None) - создаёт директорию. OSError, если директория существует.

os.makedirs(path, mode=0o777, exist_ok=False) - создаёт директорию, создавая при этом промежуточные директории.

os.remove(path, *, dir_fd=None) - удаляет путь к файлу.

os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None) - переименовывает файл или директорию из src в dst.

os.renames(old, new) - переименовывает old в new, создавая промежуточные директории.

os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None) - переименовывает из src в dst с принудительной заменой.

os.rmdir(path, *, dir_fd=None) - удаляет пустую директорию.

os.removedirs(path) - удаляет директорию, затем пытается удалить родительские директории, и удаляет их рекурсивно, пока они пусты.

os.symlink(source, link_name, target_is_directory=False, *, dir_fd=None) - создаёт символическую ссылку на объект.

os.sync() - записывает все данные на диск (Unix).

os.truncate(path, length) - обрезает файл до длины length.

os.utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True) - модификация времени последнего доступа и изменения файла. Либо times - кортеж (время доступа в секундах,
время изменения в секундах), 
либо ns - кортеж (время доступа в наносекундах, время изменения в наносекундах).

os.walk(top, topdown=True, onerror=None, followlinks=False) - генерация имён файлов в дереве каталогов, сверху вниз (если topdown равен True), либо снизу вверх (если False).
Для каждого каталога функция walk возвращает кортеж (путь к каталогу, список каталогов, список файлов).

os.system(command) - исполняет системную команду, возвращает код её завершения (в случае успеха 0).

os.urandom(n) - n случайных байт. Возможно использование этой функции в криптографических целях.

os.path - модуль, реализующий некоторые полезные функции на работы с путями.



import datetime

pri = datetime.datetime.now()

print(pri)



Класс datetime.date(year, month, day) - стандартная дата. Атрибуты: year, month, day. Неизменяемый объект.

Класс datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None) - стандартное время, не зависит от даты. Атрибуты: hour, minute, second, microsecond, tzinfo.

Класс datetime.timedelta - разница между двумя моментами времени, с точностью до микросекунд.

Класс datetime.tzinfo - абстрактный базовый класс для информации о временной зоне (например, для учета часового пояса и / или летнего времени).

Класс datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None) - комбинация даты и времени.



Обязательные аргументы:
datetime.MINYEAR (1) ≤ year ≤ datetime.MAXYEAR (9999)
1 ≤ month ≤ 12
1 ≤ day ≤ количество дней в данном месяце и году



Необязательные:
0 ≤ minute < 60
0 ≤ second < 60
0 ≤ microsecond < 1000000



Методы класса datetime:

datetime.today() - объект datetime из текущей даты и времени. Работает также, как и datetime.now() со значением tz=None.

datetime.fromtimestamp(timestamp) - дата из стандартного представления времени.

datetime.fromordinal(ordinal) - дата из числа, представляющего собой количество дней, прошедших с 01.01.1970.

datetime.now(tz=None) - объект datetime из текущей даты и времени.

datetime.combine(date, time) - объект datetime из комбинации объектов date и time.

datetime.strptime(date_string, format) - преобразует строку в datetime (так же, как и функция strptime из модуля time).

datetime.strftime(format) - см. функцию strftime из модуля time.

datetime.date() - объект даты (с отсечением времени).

datetime.time() - объект времени (с отсечением даты).

datetime.replace([year[, month[, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]]]]]) - возвращает новый объект datetime с изменёнными атрибутами.

datetime.timetuple() - возвращает struct_time из datetime.

datetime.toordinal() - количество дней, прошедших с 01.01.1970.

datetime.timestamp() - возвращает время в секундах с начала эпохи.

datetime.weekday() - день недели в виде числа, понедельник - 0, воскресенье - 6.

datetime.isoweekday() - день недели в виде числа, понедельник - 1, воскресенье - 7.

datetime.isocalendar() - кортеж (год в формате ISO, ISO номер недели, ISO день недели).

datetime.isoformat(sep='T') - красивая строка вида "YYYY-MM-DDTHH:MM:SS.mmmmmm" или, если microsecond == 0, "YYYY-MM-DDTHH:MM:SS"



Загружаем и сохраняем картинку: guido-van-rossum.jpg
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im.show()



Угол вращения картинки в Pillow

В методе rotate() указываем угол вращения изображения в градусах в качестве первого аргумента. Направление вращения будет против часовой стрелки.

Поворачиваем изображение на 90 градусов:

from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(90)
im_rotate.save('guido_90.jpg', quality=95)
im.close()



Поворачиваем изображение на 45 градусов через PIL в Python:
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45)
im_rotate.save('guido_45.jpg', quality=95)
im.close()



Поворачиваем изображение полностью
Как видно на картинках в примерах выше, по умолчанию размер готового изображения равен размеру изначального изображения, а части повернутого изображения которые попали за пределами 
изначального размера отсекаются. Если мы поставим параметр expand на True, то повернутое изображение удовлетворит наши требования.
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(90, expand=True)
im_rotate.save('guido_expand_90.jpg', quality=95)
im.close()



Теперь изображение выглядит так как мы ожидали. Она повернулась полностью, без черных границ по сторонам.



Поворачиваем изображение на 45 градусов.
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45, expand=True)
im_rotate.save('guido_expand_45.jpg', quality=95)
im.close()


Фильтры NEAREST, BILINEAR и BICUBIC в Pillow

Параметр resample можно использовать для указания определенного фильтра, который будет использоваться при поворачивании изображения.
Image.NEAREST (ближайший сосед / по умолчанию);
Image.BILINEAR;
Image.BICUBIC.

С помощью фильтра Image.BICUBIC детали изображения станут более четким, чем в случае использования фильтра по умолчанию Image.NEAREST.
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45, expand=True, resample=Image.BICUBIC)
im_rotate.save('guido_resample_bicubic.jpg', quality=95)
im.close()

Небольшие различия есть, но у данной картинки они не очень видны. Но, например фильтр Image.BILINEAR сделал картинку более гладкой.



Меняем центр изображения при её поворачивании
Вы можете уточнить позицию центра изображения с помощью параметра center в методе rotate().
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45, center=(0, 100))
im_rotate.save('guido_new_center.jpg', quality=95)
im.close()



В случае, когда параметр expand=True, область выходящего изображения определяется предположением, что картинка крутится по своему изначальному центру.
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45, expand=True, center=(0, 100))
im_rotate.save('guido_new_center_expand.jpg', quality=95)
im.close()

Смещение изображения при поворачивании
Вы можете задать определенное смещение перед вращением изображения с помощью параметра translate.
Параметр translate требует два координата (смещения в x направлении,  смещения в y направлении).


Чтобы продемонстрировать данное смещение, мы не будем поворачивать изображение а просто укажем нужное нам смещение.
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(0, translate=(100, 50))
im_rotate.save('guido_translate_0.jpg', quality=95)
im.close()



Поворот изображения на 45 градусов со смещением:
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45, translate=(100, 50))
im_rotate.save('guido_translate_45.jpg', quality=95)
im.close()



Если параметр expand=True, итоговая область изображения определяется предположением, что картинка вращается без смещения.
from PIL import Image
im = Image.open('guido-van-rossum.jpg')
im_rotate = im.rotate(45, translate=(100, 50), expand=True)
im_rotate.save('guido_translate_expand_45.jpg', quality=95)
im.close()